# coding: utf-8

"""
    AdventureWorksAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.product_category import ProductCategory  # noqa: F401,E501
from swagger_client.models.product_model import ProductModel  # noqa: F401,E501
from swagger_client.models.sales_order_detail import SalesOrderDetail  # noqa: F401,E501


class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'int',
        'name': 'str',
        'product_number': 'str',
        'color': 'str',
        'standard_cost': 'float',
        'list_price': 'float',
        'size': 'str',
        'weight': 'float',
        'product_category_id': 'int',
        'product_model_id': 'int',
        'sell_start_date': 'datetime',
        'sell_end_date': 'datetime',
        'discontinued_date': 'datetime',
        'thumb_nail_photo': 'str',
        'thumbnail_photo_file_name': 'str',
        'rowguid': 'str',
        'modified_date': 'datetime',
        'product_category': 'ProductCategory',
        'product_model': 'ProductModel',
        'sales_order_detail': 'list[SalesOrderDetail]'
    }

    attribute_map = {
        'product_id': 'productId',
        'name': 'name',
        'product_number': 'productNumber',
        'color': 'color',
        'standard_cost': 'standardCost',
        'list_price': 'listPrice',
        'size': 'size',
        'weight': 'weight',
        'product_category_id': 'productCategoryId',
        'product_model_id': 'productModelId',
        'sell_start_date': 'sellStartDate',
        'sell_end_date': 'sellEndDate',
        'discontinued_date': 'discontinuedDate',
        'thumb_nail_photo': 'thumbNailPhoto',
        'thumbnail_photo_file_name': 'thumbnailPhotoFileName',
        'rowguid': 'rowguid',
        'modified_date': 'modifiedDate',
        'product_category': 'productCategory',
        'product_model': 'productModel',
        'sales_order_detail': 'salesOrderDetail'
    }

    def __init__(self, product_id=None, name=None, product_number=None, color=None, standard_cost=None, list_price=None, size=None, weight=None, product_category_id=None, product_model_id=None, sell_start_date=None, sell_end_date=None, discontinued_date=None, thumb_nail_photo=None, thumbnail_photo_file_name=None, rowguid=None, modified_date=None, product_category=None, product_model=None, sales_order_detail=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501

        self._product_id = None
        self._name = None
        self._product_number = None
        self._color = None
        self._standard_cost = None
        self._list_price = None
        self._size = None
        self._weight = None
        self._product_category_id = None
        self._product_model_id = None
        self._sell_start_date = None
        self._sell_end_date = None
        self._discontinued_date = None
        self._thumb_nail_photo = None
        self._thumbnail_photo_file_name = None
        self._rowguid = None
        self._modified_date = None
        self._product_category = None
        self._product_model = None
        self._sales_order_detail = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if name is not None:
            self.name = name
        if product_number is not None:
            self.product_number = product_number
        if color is not None:
            self.color = color
        if standard_cost is not None:
            self.standard_cost = standard_cost
        if list_price is not None:
            self.list_price = list_price
        if size is not None:
            self.size = size
        if weight is not None:
            self.weight = weight
        if product_category_id is not None:
            self.product_category_id = product_category_id
        if product_model_id is not None:
            self.product_model_id = product_model_id
        if sell_start_date is not None:
            self.sell_start_date = sell_start_date
        if sell_end_date is not None:
            self.sell_end_date = sell_end_date
        if discontinued_date is not None:
            self.discontinued_date = discontinued_date
        if thumb_nail_photo is not None:
            self.thumb_nail_photo = thumb_nail_photo
        if thumbnail_photo_file_name is not None:
            self.thumbnail_photo_file_name = thumbnail_photo_file_name
        if rowguid is not None:
            self.rowguid = rowguid
        if modified_date is not None:
            self.modified_date = modified_date
        if product_category is not None:
            self.product_category = product_category
        if product_model is not None:
            self.product_model = product_model
        if sales_order_detail is not None:
            self.sales_order_detail = sales_order_detail

    @property
    def product_id(self):
        """Gets the product_id of this Product.  # noqa: E501


        :return: The product_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Product.


        :param product_id: The product_id of this Product.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501


        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_number(self):
        """Gets the product_number of this Product.  # noqa: E501


        :return: The product_number of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this Product.


        :param product_number: The product_number of this Product.  # noqa: E501
        :type: str
        """

        self._product_number = product_number

    @property
    def color(self):
        """Gets the color of this Product.  # noqa: E501


        :return: The color of this Product.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Product.


        :param color: The color of this Product.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def standard_cost(self):
        """Gets the standard_cost of this Product.  # noqa: E501


        :return: The standard_cost of this Product.  # noqa: E501
        :rtype: float
        """
        return self._standard_cost

    @standard_cost.setter
    def standard_cost(self, standard_cost):
        """Sets the standard_cost of this Product.


        :param standard_cost: The standard_cost of this Product.  # noqa: E501
        :type: float
        """

        self._standard_cost = standard_cost

    @property
    def list_price(self):
        """Gets the list_price of this Product.  # noqa: E501


        :return: The list_price of this Product.  # noqa: E501
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Product.


        :param list_price: The list_price of this Product.  # noqa: E501
        :type: float
        """

        self._list_price = list_price

    @property
    def size(self):
        """Gets the size of this Product.  # noqa: E501


        :return: The size of this Product.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Product.


        :param size: The size of this Product.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def weight(self):
        """Gets the weight of this Product.  # noqa: E501


        :return: The weight of this Product.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Product.


        :param weight: The weight of this Product.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def product_category_id(self):
        """Gets the product_category_id of this Product.  # noqa: E501


        :return: The product_category_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._product_category_id

    @product_category_id.setter
    def product_category_id(self, product_category_id):
        """Sets the product_category_id of this Product.


        :param product_category_id: The product_category_id of this Product.  # noqa: E501
        :type: int
        """

        self._product_category_id = product_category_id

    @property
    def product_model_id(self):
        """Gets the product_model_id of this Product.  # noqa: E501


        :return: The product_model_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._product_model_id

    @product_model_id.setter
    def product_model_id(self, product_model_id):
        """Sets the product_model_id of this Product.


        :param product_model_id: The product_model_id of this Product.  # noqa: E501
        :type: int
        """

        self._product_model_id = product_model_id

    @property
    def sell_start_date(self):
        """Gets the sell_start_date of this Product.  # noqa: E501


        :return: The sell_start_date of this Product.  # noqa: E501
        :rtype: datetime
        """
        return self._sell_start_date

    @sell_start_date.setter
    def sell_start_date(self, sell_start_date):
        """Sets the sell_start_date of this Product.


        :param sell_start_date: The sell_start_date of this Product.  # noqa: E501
        :type: datetime
        """

        self._sell_start_date = sell_start_date

    @property
    def sell_end_date(self):
        """Gets the sell_end_date of this Product.  # noqa: E501


        :return: The sell_end_date of this Product.  # noqa: E501
        :rtype: datetime
        """
        return self._sell_end_date

    @sell_end_date.setter
    def sell_end_date(self, sell_end_date):
        """Sets the sell_end_date of this Product.


        :param sell_end_date: The sell_end_date of this Product.  # noqa: E501
        :type: datetime
        """

        self._sell_end_date = sell_end_date

    @property
    def discontinued_date(self):
        """Gets the discontinued_date of this Product.  # noqa: E501


        :return: The discontinued_date of this Product.  # noqa: E501
        :rtype: datetime
        """
        return self._discontinued_date

    @discontinued_date.setter
    def discontinued_date(self, discontinued_date):
        """Sets the discontinued_date of this Product.


        :param discontinued_date: The discontinued_date of this Product.  # noqa: E501
        :type: datetime
        """

        self._discontinued_date = discontinued_date

    @property
    def thumb_nail_photo(self):
        """Gets the thumb_nail_photo of this Product.  # noqa: E501


        :return: The thumb_nail_photo of this Product.  # noqa: E501
        :rtype: str
        """
        return self._thumb_nail_photo

    @thumb_nail_photo.setter
    def thumb_nail_photo(self, thumb_nail_photo):
        """Sets the thumb_nail_photo of this Product.


        :param thumb_nail_photo: The thumb_nail_photo of this Product.  # noqa: E501
        :type: str
        """
        if thumb_nail_photo is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', thumb_nail_photo):  # noqa: E501
            raise ValueError(r"Invalid value for `thumb_nail_photo`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._thumb_nail_photo = thumb_nail_photo

    @property
    def thumbnail_photo_file_name(self):
        """Gets the thumbnail_photo_file_name of this Product.  # noqa: E501


        :return: The thumbnail_photo_file_name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_photo_file_name

    @thumbnail_photo_file_name.setter
    def thumbnail_photo_file_name(self, thumbnail_photo_file_name):
        """Sets the thumbnail_photo_file_name of this Product.


        :param thumbnail_photo_file_name: The thumbnail_photo_file_name of this Product.  # noqa: E501
        :type: str
        """

        self._thumbnail_photo_file_name = thumbnail_photo_file_name

    @property
    def rowguid(self):
        """Gets the rowguid of this Product.  # noqa: E501


        :return: The rowguid of this Product.  # noqa: E501
        :rtype: str
        """
        return self._rowguid

    @rowguid.setter
    def rowguid(self, rowguid):
        """Sets the rowguid of this Product.


        :param rowguid: The rowguid of this Product.  # noqa: E501
        :type: str
        """

        self._rowguid = rowguid

    @property
    def modified_date(self):
        """Gets the modified_date of this Product.  # noqa: E501


        :return: The modified_date of this Product.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Product.


        :param modified_date: The modified_date of this Product.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def product_category(self):
        """Gets the product_category of this Product.  # noqa: E501


        :return: The product_category of this Product.  # noqa: E501
        :rtype: ProductCategory
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this Product.


        :param product_category: The product_category of this Product.  # noqa: E501
        :type: ProductCategory
        """

        self._product_category = product_category

    @property
    def product_model(self):
        """Gets the product_model of this Product.  # noqa: E501


        :return: The product_model of this Product.  # noqa: E501
        :rtype: ProductModel
        """
        return self._product_model

    @product_model.setter
    def product_model(self, product_model):
        """Sets the product_model of this Product.


        :param product_model: The product_model of this Product.  # noqa: E501
        :type: ProductModel
        """

        self._product_model = product_model

    @property
    def sales_order_detail(self):
        """Gets the sales_order_detail of this Product.  # noqa: E501


        :return: The sales_order_detail of this Product.  # noqa: E501
        :rtype: list[SalesOrderDetail]
        """
        return self._sales_order_detail

    @sales_order_detail.setter
    def sales_order_detail(self, sales_order_detail):
        """Sets the sales_order_detail of this Product.


        :param sales_order_detail: The sales_order_detail of this Product.  # noqa: E501
        :type: list[SalesOrderDetail]
        """

        self._sales_order_detail = sales_order_detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
