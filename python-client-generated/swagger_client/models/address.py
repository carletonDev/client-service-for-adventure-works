# coding: utf-8

"""
    AdventureWorksAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.customer_address import CustomerAddress  # noqa: F401,E501
from swagger_client.models.sales_order_header import SalesOrderHeader  # noqa: F401,E501


class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'int',
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'state_province': 'str',
        'country_region': 'str',
        'postal_code': 'str',
        'rowguid': 'str',
        'modified_date': 'datetime',
        'customer_address': 'list[CustomerAddress]',
        'sales_order_header_bill_to_address': 'list[SalesOrderHeader]',
        'sales_order_header_ship_to_address': 'list[SalesOrderHeader]'
    }

    attribute_map = {
        'address_id': 'addressId',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'city': 'city',
        'state_province': 'stateProvince',
        'country_region': 'countryRegion',
        'postal_code': 'postalCode',
        'rowguid': 'rowguid',
        'modified_date': 'modifiedDate',
        'customer_address': 'customerAddress',
        'sales_order_header_bill_to_address': 'salesOrderHeaderBillToAddress',
        'sales_order_header_ship_to_address': 'salesOrderHeaderShipToAddress'
    }

    def __init__(self, address_id=None, address_line1=None, address_line2=None, city=None, state_province=None, country_region=None, postal_code=None, rowguid=None, modified_date=None, customer_address=None, sales_order_header_bill_to_address=None, sales_order_header_ship_to_address=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501

        self._address_id = None
        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._state_province = None
        self._country_region = None
        self._postal_code = None
        self._rowguid = None
        self._modified_date = None
        self._customer_address = None
        self._sales_order_header_bill_to_address = None
        self._sales_order_header_ship_to_address = None
        self.discriminator = None

        if address_id is not None:
            self.address_id = address_id
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if city is not None:
            self.city = city
        if state_province is not None:
            self.state_province = state_province
        if country_region is not None:
            self.country_region = country_region
        if postal_code is not None:
            self.postal_code = postal_code
        if rowguid is not None:
            self.rowguid = rowguid
        if modified_date is not None:
            self.modified_date = modified_date
        if customer_address is not None:
            self.customer_address = customer_address
        if sales_order_header_bill_to_address is not None:
            self.sales_order_header_bill_to_address = sales_order_header_bill_to_address
        if sales_order_header_ship_to_address is not None:
            self.sales_order_header_ship_to_address = sales_order_header_ship_to_address

    @property
    def address_id(self):
        """Gets the address_id of this Address.  # noqa: E501


        :return: The address_id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this Address.


        :param address_id: The address_id of this Address.  # noqa: E501
        :type: int
        """

        self._address_id = address_id

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501


        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.


        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501


        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.


        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501


        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state_province(self):
        """Gets the state_province of this Address.  # noqa: E501


        :return: The state_province of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this Address.


        :param state_province: The state_province of this Address.  # noqa: E501
        :type: str
        """

        self._state_province = state_province

    @property
    def country_region(self):
        """Gets the country_region of this Address.  # noqa: E501


        :return: The country_region of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_region

    @country_region.setter
    def country_region(self, country_region):
        """Sets the country_region of this Address.


        :param country_region: The country_region of this Address.  # noqa: E501
        :type: str
        """

        self._country_region = country_region

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501


        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def rowguid(self):
        """Gets the rowguid of this Address.  # noqa: E501


        :return: The rowguid of this Address.  # noqa: E501
        :rtype: str
        """
        return self._rowguid

    @rowguid.setter
    def rowguid(self, rowguid):
        """Sets the rowguid of this Address.


        :param rowguid: The rowguid of this Address.  # noqa: E501
        :type: str
        """

        self._rowguid = rowguid

    @property
    def modified_date(self):
        """Gets the modified_date of this Address.  # noqa: E501


        :return: The modified_date of this Address.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Address.


        :param modified_date: The modified_date of this Address.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def customer_address(self):
        """Gets the customer_address of this Address.  # noqa: E501


        :return: The customer_address of this Address.  # noqa: E501
        :rtype: list[CustomerAddress]
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this Address.


        :param customer_address: The customer_address of this Address.  # noqa: E501
        :type: list[CustomerAddress]
        """

        self._customer_address = customer_address

    @property
    def sales_order_header_bill_to_address(self):
        """Gets the sales_order_header_bill_to_address of this Address.  # noqa: E501


        :return: The sales_order_header_bill_to_address of this Address.  # noqa: E501
        :rtype: list[SalesOrderHeader]
        """
        return self._sales_order_header_bill_to_address

    @sales_order_header_bill_to_address.setter
    def sales_order_header_bill_to_address(self, sales_order_header_bill_to_address):
        """Sets the sales_order_header_bill_to_address of this Address.


        :param sales_order_header_bill_to_address: The sales_order_header_bill_to_address of this Address.  # noqa: E501
        :type: list[SalesOrderHeader]
        """

        self._sales_order_header_bill_to_address = sales_order_header_bill_to_address

    @property
    def sales_order_header_ship_to_address(self):
        """Gets the sales_order_header_ship_to_address of this Address.  # noqa: E501


        :return: The sales_order_header_ship_to_address of this Address.  # noqa: E501
        :rtype: list[SalesOrderHeader]
        """
        return self._sales_order_header_ship_to_address

    @sales_order_header_ship_to_address.setter
    def sales_order_header_ship_to_address(self, sales_order_header_ship_to_address):
        """Sets the sales_order_header_ship_to_address of this Address.


        :param sales_order_header_ship_to_address: The sales_order_header_ship_to_address of this Address.  # noqa: E501
        :type: list[SalesOrderHeader]
        """

        self._sales_order_header_ship_to_address = sales_order_header_ship_to_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
