# coding: utf-8

"""
    AdventureWorksAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.product import Product  # noqa: F401,E501
from swagger_client.models.sales_order_header import SalesOrderHeader  # noqa: F401,E501


class SalesOrderDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sales_order_id': 'int',
        'sales_order_detail_id': 'int',
        'order_qty': 'int',
        'product_id': 'int',
        'unit_price': 'float',
        'unit_price_discount': 'float',
        'line_total': 'float',
        'rowguid': 'str',
        'modified_date': 'datetime',
        'product': 'Product',
        'sales_order': 'SalesOrderHeader'
    }

    attribute_map = {
        'sales_order_id': 'salesOrderId',
        'sales_order_detail_id': 'salesOrderDetailId',
        'order_qty': 'orderQty',
        'product_id': 'productId',
        'unit_price': 'unitPrice',
        'unit_price_discount': 'unitPriceDiscount',
        'line_total': 'lineTotal',
        'rowguid': 'rowguid',
        'modified_date': 'modifiedDate',
        'product': 'product',
        'sales_order': 'salesOrder'
    }

    def __init__(self, sales_order_id=None, sales_order_detail_id=None, order_qty=None, product_id=None, unit_price=None, unit_price_discount=None, line_total=None, rowguid=None, modified_date=None, product=None, sales_order=None):  # noqa: E501
        """SalesOrderDetail - a model defined in Swagger"""  # noqa: E501

        self._sales_order_id = None
        self._sales_order_detail_id = None
        self._order_qty = None
        self._product_id = None
        self._unit_price = None
        self._unit_price_discount = None
        self._line_total = None
        self._rowguid = None
        self._modified_date = None
        self._product = None
        self._sales_order = None
        self.discriminator = None

        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        if sales_order_detail_id is not None:
            self.sales_order_detail_id = sales_order_detail_id
        if order_qty is not None:
            self.order_qty = order_qty
        if product_id is not None:
            self.product_id = product_id
        if unit_price is not None:
            self.unit_price = unit_price
        if unit_price_discount is not None:
            self.unit_price_discount = unit_price_discount
        if line_total is not None:
            self.line_total = line_total
        if rowguid is not None:
            self.rowguid = rowguid
        if modified_date is not None:
            self.modified_date = modified_date
        if product is not None:
            self.product = product
        if sales_order is not None:
            self.sales_order = sales_order

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this SalesOrderDetail.  # noqa: E501


        :return: The sales_order_id of this SalesOrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this SalesOrderDetail.


        :param sales_order_id: The sales_order_id of this SalesOrderDetail.  # noqa: E501
        :type: int
        """

        self._sales_order_id = sales_order_id

    @property
    def sales_order_detail_id(self):
        """Gets the sales_order_detail_id of this SalesOrderDetail.  # noqa: E501


        :return: The sales_order_detail_id of this SalesOrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._sales_order_detail_id

    @sales_order_detail_id.setter
    def sales_order_detail_id(self, sales_order_detail_id):
        """Sets the sales_order_detail_id of this SalesOrderDetail.


        :param sales_order_detail_id: The sales_order_detail_id of this SalesOrderDetail.  # noqa: E501
        :type: int
        """

        self._sales_order_detail_id = sales_order_detail_id

    @property
    def order_qty(self):
        """Gets the order_qty of this SalesOrderDetail.  # noqa: E501


        :return: The order_qty of this SalesOrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._order_qty

    @order_qty.setter
    def order_qty(self, order_qty):
        """Sets the order_qty of this SalesOrderDetail.


        :param order_qty: The order_qty of this SalesOrderDetail.  # noqa: E501
        :type: int
        """

        self._order_qty = order_qty

    @property
    def product_id(self):
        """Gets the product_id of this SalesOrderDetail.  # noqa: E501


        :return: The product_id of this SalesOrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SalesOrderDetail.


        :param product_id: The product_id of this SalesOrderDetail.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def unit_price(self):
        """Gets the unit_price of this SalesOrderDetail.  # noqa: E501


        :return: The unit_price of this SalesOrderDetail.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this SalesOrderDetail.


        :param unit_price: The unit_price of this SalesOrderDetail.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def unit_price_discount(self):
        """Gets the unit_price_discount of this SalesOrderDetail.  # noqa: E501


        :return: The unit_price_discount of this SalesOrderDetail.  # noqa: E501
        :rtype: float
        """
        return self._unit_price_discount

    @unit_price_discount.setter
    def unit_price_discount(self, unit_price_discount):
        """Sets the unit_price_discount of this SalesOrderDetail.


        :param unit_price_discount: The unit_price_discount of this SalesOrderDetail.  # noqa: E501
        :type: float
        """

        self._unit_price_discount = unit_price_discount

    @property
    def line_total(self):
        """Gets the line_total of this SalesOrderDetail.  # noqa: E501


        :return: The line_total of this SalesOrderDetail.  # noqa: E501
        :rtype: float
        """
        return self._line_total

    @line_total.setter
    def line_total(self, line_total):
        """Sets the line_total of this SalesOrderDetail.


        :param line_total: The line_total of this SalesOrderDetail.  # noqa: E501
        :type: float
        """

        self._line_total = line_total

    @property
    def rowguid(self):
        """Gets the rowguid of this SalesOrderDetail.  # noqa: E501


        :return: The rowguid of this SalesOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._rowguid

    @rowguid.setter
    def rowguid(self, rowguid):
        """Sets the rowguid of this SalesOrderDetail.


        :param rowguid: The rowguid of this SalesOrderDetail.  # noqa: E501
        :type: str
        """

        self._rowguid = rowguid

    @property
    def modified_date(self):
        """Gets the modified_date of this SalesOrderDetail.  # noqa: E501


        :return: The modified_date of this SalesOrderDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this SalesOrderDetail.


        :param modified_date: The modified_date of this SalesOrderDetail.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def product(self):
        """Gets the product of this SalesOrderDetail.  # noqa: E501


        :return: The product of this SalesOrderDetail.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this SalesOrderDetail.


        :param product: The product of this SalesOrderDetail.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def sales_order(self):
        """Gets the sales_order of this SalesOrderDetail.  # noqa: E501


        :return: The sales_order of this SalesOrderDetail.  # noqa: E501
        :rtype: SalesOrderHeader
        """
        return self._sales_order

    @sales_order.setter
    def sales_order(self, sales_order):
        """Sets the sales_order of this SalesOrderDetail.


        :param sales_order: The sales_order of this SalesOrderDetail.  # noqa: E501
        :type: SalesOrderHeader
        """

        self._sales_order = sales_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrderDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrderDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
