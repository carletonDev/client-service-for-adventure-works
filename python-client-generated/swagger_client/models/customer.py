# coding: utf-8

"""
    AdventureWorksAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.customer_address import CustomerAddress  # noqa: F401,E501
from swagger_client.models.sales_order_header import SalesOrderHeader  # noqa: F401,E501


class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'name_style': 'bool',
        'title': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'suffix': 'str',
        'company_name': 'str',
        'sales_person': 'str',
        'email_address': 'str',
        'phone': 'str',
        'password_hash': 'str',
        'password_salt': 'str',
        'rowguid': 'str',
        'modified_date': 'datetime',
        'customer_address': 'list[CustomerAddress]',
        'sales_order_header': 'list[SalesOrderHeader]'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'name_style': 'nameStyle',
        'title': 'title',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'suffix': 'suffix',
        'company_name': 'companyName',
        'sales_person': 'salesPerson',
        'email_address': 'emailAddress',
        'phone': 'phone',
        'password_hash': 'passwordHash',
        'password_salt': 'passwordSalt',
        'rowguid': 'rowguid',
        'modified_date': 'modifiedDate',
        'customer_address': 'customerAddress',
        'sales_order_header': 'salesOrderHeader'
    }

    def __init__(self, customer_id=None, name_style=None, title=None, first_name=None, middle_name=None, last_name=None, suffix=None, company_name=None, sales_person=None, email_address=None, phone=None, password_hash=None, password_salt=None, rowguid=None, modified_date=None, customer_address=None, sales_order_header=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501

        self._customer_id = None
        self._name_style = None
        self._title = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._suffix = None
        self._company_name = None
        self._sales_person = None
        self._email_address = None
        self._phone = None
        self._password_hash = None
        self._password_salt = None
        self._rowguid = None
        self._modified_date = None
        self._customer_address = None
        self._sales_order_header = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if name_style is not None:
            self.name_style = name_style
        if title is not None:
            self.title = title
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if suffix is not None:
            self.suffix = suffix
        if company_name is not None:
            self.company_name = company_name
        if sales_person is not None:
            self.sales_person = sales_person
        if email_address is not None:
            self.email_address = email_address
        if phone is not None:
            self.phone = phone
        if password_hash is not None:
            self.password_hash = password_hash
        if password_salt is not None:
            self.password_salt = password_salt
        if rowguid is not None:
            self.rowguid = rowguid
        if modified_date is not None:
            self.modified_date = modified_date
        if customer_address is not None:
            self.customer_address = customer_address
        if sales_order_header is not None:
            self.sales_order_header = sales_order_header

    @property
    def customer_id(self):
        """Gets the customer_id of this Customer.  # noqa: E501


        :return: The customer_id of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Customer.


        :param customer_id: The customer_id of this Customer.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def name_style(self):
        """Gets the name_style of this Customer.  # noqa: E501


        :return: The name_style of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._name_style

    @name_style.setter
    def name_style(self, name_style):
        """Sets the name_style of this Customer.


        :param name_style: The name_style of this Customer.  # noqa: E501
        :type: bool
        """

        self._name_style = name_style

    @property
    def title(self):
        """Gets the title of this Customer.  # noqa: E501


        :return: The title of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Customer.


        :param title: The title of this Customer.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this Customer.  # noqa: E501


        :return: The first_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.


        :param first_name: The first_name of this Customer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Customer.  # noqa: E501


        :return: The middle_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Customer.


        :param middle_name: The middle_name of this Customer.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this Customer.  # noqa: E501


        :return: The last_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.


        :param last_name: The last_name of this Customer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def suffix(self):
        """Gets the suffix of this Customer.  # noqa: E501


        :return: The suffix of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Customer.


        :param suffix: The suffix of this Customer.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def company_name(self):
        """Gets the company_name of this Customer.  # noqa: E501


        :return: The company_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Customer.


        :param company_name: The company_name of this Customer.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def sales_person(self):
        """Gets the sales_person of this Customer.  # noqa: E501


        :return: The sales_person of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._sales_person

    @sales_person.setter
    def sales_person(self, sales_person):
        """Sets the sales_person of this Customer.


        :param sales_person: The sales_person of this Customer.  # noqa: E501
        :type: str
        """

        self._sales_person = sales_person

    @property
    def email_address(self):
        """Gets the email_address of this Customer.  # noqa: E501


        :return: The email_address of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Customer.


        :param email_address: The email_address of this Customer.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def phone(self):
        """Gets the phone of this Customer.  # noqa: E501


        :return: The phone of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Customer.


        :param phone: The phone of this Customer.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def password_hash(self):
        """Gets the password_hash of this Customer.  # noqa: E501


        :return: The password_hash of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this Customer.


        :param password_hash: The password_hash of this Customer.  # noqa: E501
        :type: str
        """

        self._password_hash = password_hash

    @property
    def password_salt(self):
        """Gets the password_salt of this Customer.  # noqa: E501


        :return: The password_salt of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._password_salt

    @password_salt.setter
    def password_salt(self, password_salt):
        """Sets the password_salt of this Customer.


        :param password_salt: The password_salt of this Customer.  # noqa: E501
        :type: str
        """

        self._password_salt = password_salt

    @property
    def rowguid(self):
        """Gets the rowguid of this Customer.  # noqa: E501


        :return: The rowguid of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._rowguid

    @rowguid.setter
    def rowguid(self, rowguid):
        """Sets the rowguid of this Customer.


        :param rowguid: The rowguid of this Customer.  # noqa: E501
        :type: str
        """

        self._rowguid = rowguid

    @property
    def modified_date(self):
        """Gets the modified_date of this Customer.  # noqa: E501


        :return: The modified_date of this Customer.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Customer.


        :param modified_date: The modified_date of this Customer.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def customer_address(self):
        """Gets the customer_address of this Customer.  # noqa: E501


        :return: The customer_address of this Customer.  # noqa: E501
        :rtype: list[CustomerAddress]
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this Customer.


        :param customer_address: The customer_address of this Customer.  # noqa: E501
        :type: list[CustomerAddress]
        """

        self._customer_address = customer_address

    @property
    def sales_order_header(self):
        """Gets the sales_order_header of this Customer.  # noqa: E501


        :return: The sales_order_header of this Customer.  # noqa: E501
        :rtype: list[SalesOrderHeader]
        """
        return self._sales_order_header

    @sales_order_header.setter
    def sales_order_header(self, sales_order_header):
        """Sets the sales_order_header of this Customer.


        :param sales_order_header: The sales_order_header of this Customer.  # noqa: E501
        :type: list[SalesOrderHeader]
        """

        self._sales_order_header = sales_order_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
